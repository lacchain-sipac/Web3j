package com.everis.blockchain.honduras.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import com.everis.blockchain.honduras.util.ContractFast;
import com.everis.blockchain.honduras.util.Web3;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.11.
 */
@SuppressWarnings("rawtypes")
public class IdentityManager extends ContractFast {
    public static final String BINARY = "608060405234801561001057600080fd5b50613244806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806373b40a5c1161006657806373b40a5c146103b1578063781f5a831461047557806399a88ec4146104a3578063a3effe8b146104d1578063e12553f51461059357610093565b8063140c5a4e14610098578063416ccfed1461016957806360a98bd61461034d57806361a3923714610373575b600080fd5b610155600480360360608110156100ae57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156100e157600080fd5b8201836020820111156100f357600080fd5b803590602001918460018302840111600160201b8311171561011457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506105b9945050505050565b604080519115158252519081900360200190f35b610331600480360360a081101561017f57600080fd5b6001600160801b03198235811692602081013590911691810190606081016040820135600160201b8111156101b357600080fd5b8201836020820111156101c557600080fd5b803590602001918460018302840111600160201b831117156101e657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561023857600080fd5b82018360208201111561024a57600080fd5b803590602001918460018302840111600160201b8311171561026b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156102bd57600080fd5b8201836020820111156102cf57600080fd5b803590602001918460018302840111600160201b831117156102f057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610670945050505050565b604080516001600160a01b039092168252519081900360200190f35b6101556004803603602081101561036357600080fd5b50356001600160a01b0316610ae5565b6103af6004803603608081101561038957600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610afa565b005b6103af600480360360808110156103c757600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b81111561040157600080fd5b82018360208201111561041357600080fd5b803590602001918460018302840111600160201b8311171561043457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610b82945050505050565b6103af6004803603604081101561048b57600080fd5b506001600160a01b0381358116916020013516610d7b565b6103af600480360360408110156104b957600080fd5b506001600160a01b0381358116916020013516610ee4565b6103af600480360360a08110156104e757600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561051a57600080fd5b82018360208201111561052c57600080fd5b803590602001918460018302840111600160201b8311171561054d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060200135611174565b6103af600480360360208110156105a957600080fd5b50356001600160a01b0316611405565b60006105c36117c2565b6001600160a01b0380861660009081526001602090815260408083209388168352928152908290209151855186928291908401908083835b6020831061061a5780518252601f1990920191602091820191016105fb565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185208582019091528054855260010154908401525090915061066790508161156f565b95945050505050565b60008030604051610680906117dc565b6001600160a01b03909116815260405190819003602001906000f0801580156106ad573d6000803e3d6000fd5b5090506000306040516106bf906117ea565b6001600160a01b03909116815260405190819003602001906000f0801580156106ec573d6000803e3d6000fd5b509050816001600160a01b0316632cb41958826040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050600060405180830381600087803b15801561074757600080fd5b505af115801561075b573d6000803e3d6000fd5b5050506001600160a01b03808416600090815260208181526040808320805460ff1916600117905551632dabac2960e01b81526001600160801b03198d16600482019081526060602483019081528b5160648401528b519588169650632dabac29958f958d958d956044810193608490910192918801918190849084905b838110156107f15781810151838201526020016107d9565b50505050905090810190601f16801561081e5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610851578181015183820152602001610839565b50505050905090810190601f16801561087e5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156108a057600080fd5b505af11580156108b4573d6000803e3d6000fd5b505060408051631c7ba19d60e01b81526001600160801b03198b1660048201908152602482019283528a5160448301528a516001600160a01b0387169550631c7ba19d94508c938c939091606490910190602085019080838360005b83811015610928578181015183820152602001610910565b50505050905090810190601f1680156109555780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561097557600080fd5b505af1158015610989573d6000803e3d6000fd5b50505050806001600160a01b03166392eefe9b836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050600060405180830381600087803b1580156109e557600080fd5b505af11580156109f9573d6000803e3d6000fd5b50505050610a0a82334260006115a5565b846040518082805190602001908083835b60208310610a3a5780518252601f199092019160209182019101610a1b565b51815160209384036101000a6000190180199092169116179052604080519290940182900382206001600160a01b038916835293519395507fa41c7bc01a19a1f2490ea9081f161455757097ccf896b4ef94f6c225efd5e12894509083900301919050a2604080516001600160a01b038416815290517fac993fde3b9423ff59e4a23cded8e89074c9c8740920d1d870f586ba7c5c8cf09181900360200190a1509695505050505050565b60006020819052908152604090205460ff1681565b610b21848460405180604001604052806002815260200161667760f01b8152508585611174565b610b4a8484604051806040016040528060048152602001630c2eae8d60e31b8152508585611174565b610b7c84846040518060400160405280600d81526020016c3232bb34b1b2b6b0b730b3b2b960991b8152508585611174565b50505050565b8360405180604001604052806002815260200161667760f01b815250610ba66117c2565b6001600160a01b03831660009081526001602090815260408083203384528252918290209151845185928291908401908083835b60208310610bf95780518252601f199092019160209182019101610bda565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201852085820190915280548552600101549084015250909150610c4690508161156f565b610c90576040805162461bcd60e51b815260206004820152601660248201527510d85c18589a5b1a5d1e481b9bdd08185b1b1bddd95960521b604482015290519081900360640190fd5b866001600160a01b031663d7f31eb98787876040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610d0c578181015183820152602001610cf4565b50505050905090810190601f168015610d395780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610d5a57600080fd5b505af1158015610d6e573d6000803e3d6000fd5b5050505050505050505050565b6001600160a01b03821660009081526020819052604090205460ff1615610dd45760405162461bcd60e51b8152600401808060200182810382526023815260200180620031cc6023913960400191505060405180910390fd5b6001600160a01b03821660008181526020818152604091829020805460ff1916600117905581516317aa5fb760e11b81523060048201529151632f54bf6e926024808201939291829003018186803b158015610e2f57600080fd5b505afa158015610e43573d6000803e3d6000fd5b505050506040513d6020811015610e5957600080fd5b5051610e975760405162461bcd60e51b8152600401808060200182810382526021815260200180620031ef6021913960400191505060405180910390fd5b610ea482824260006115a5565b604080516001600160a01b038416815290517fcae2f416e2ab213d7907943e6c1cf701343f6415fd0be1f0c3db985222ca04a59181900360200190a15050565b816040518060400160405280600581526020016430b236b4b760d91b815250610f0b6117c2565b6001600160a01b03831660009081526001602090815260408083203384528252918290209151845185928291908401908083835b60208310610f5e5780518252601f199092019160209182019101610f3f565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201852085820190915280548552600101549084015250909150610fab90508161156f565b610ff5576040805162461bcd60e51b815260206004820152601660248201527510d85c18589a5b1a5d1e481b9bdd08185b1b1bddd95960521b604482015290519081900360640190fd5b846001600160a01b0316637065cb48856040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050600060405180830381600087803b15801561104d57600080fd5b505af1158015611061573d6000803e3d6000fd5b50505050846001600160a01b031663b15be2f56040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156110a057600080fd5b505af11580156110b4573d6000803e3d6000fd5b50506040805163781f5a8360e01b81526001600160a01b0389811660048301523360248301529151918816935063781f5a83925060448082019260009290919082900301818387803b15801561110957600080fd5b505af115801561111d573d6000803e3d6000fd5b5050505061112a85611405565b604080513081526001600160a01b038616602082015281517f5d611f318680d00598bb735d61bacf0c514c6b50e1e5ad30040a4df2b12791c7929181900390910190a15050505050565b846040518060400160405280600d81526020016c3232bb34b1b2b6b0b730b3b2b960991b8152506111a36117c2565b6001600160a01b03831660009081526001602090815260408083203384528252918290209151845185928291908401908083835b602083106111f65780518252601f1990920191602091820191016111d7565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185208582019091528054855260010154908401525090915061124390508161156f565b61128d576040805162461bcd60e51b815260206004820152601660248201527510d85c18589a5b1a5d1e481b9bdd08185b1b1bddd95960521b604482015290519081900360640190fd5b60408051808201825286815260208082018790526001600160a01b03808c16600090815260018352848120918c168152908252839020925189519293928a928291908401908083835b602083106112f55780518252601f1990920191602091820191016112d6565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201852086518155958201516001909601959095556001600160a01b038d811685528c1684820152606084018a90526080840189905260a09484018581528b51958501959095528a517f80739aafc1752b2e2276f4acdc567b6fd0391e87e67945f1de5242035ca228a6958e958e95508d94508c938c9391929160c084019187019080838360005b838110156113bd5781810151838201526020016113a5565b50505050905090810190601f1680156113ea5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a15050505050505050565b806040518060400160405280600581526020016430b236b4b760d91b81525061142c6117c2565b6001600160a01b03831660009081526001602090815260408083203384528252918290209151845185928291908401908083835b6020831061147f5780518252601f199092019160209182019101611460565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520858201909152805485526001015490840152509091506114cc90508161156f565b611516576040805162461bcd60e51b815260206004820152601660248201527510d85c18589a5b1a5d1e481b9bdd08185b1b1bddd95960521b604482015290519081900360640190fd5b6001600160a01b03841660008181526020818152604091829020805460ff19169055815192835290517f20f455568a172eeed867c6a177458b42607b460b4fe04d85e74817ef79df4b329281900390910190a150505050565b805160009015801590611583575081514210155b801561159f575081602001514211158061159f57506020820151155b92915050565b6115cc848460405180604001604052806002815260200161667760f01b815250858561164d565b6115f58484604051806040016040528060048152602001630c2eae8d60e31b815250858561164d565b61162784846040518060400160405280600d81526020016c3232bb34b1b2b6b0b730b3b2b960991b815250858561164d565b610b7c84846040518060400160405280600581526020016430b236b4b760d91b81525085855b60408051808201825283815260208082018490526001600160a01b0380891660009081526001835284812091891681529082528390209251865192939287928291908401908083835b602083106116b55780518252601f199092019160209182019101611696565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201852086518155958201516001909601959095556001600160a01b038a81168552891684820152606084018790526080840186905260a094840185815288519585019590955287517f80739aafc1752b2e2276f4acdc567b6fd0391e87e67945f1de5242035ca228a6958b958b95508a94508993899391929160c084019187019080838360005b8381101561177d578181015183820152602001611765565b50505050905090810190601f1680156117aa5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a15050505050565b604051806040016040528060008152602001600081525090565b6108db80620017f983390190565b6110f880620020d48339019056fe60e0604052602e6080818152906108ad60a0398051610026916001916020909101906100ba565b50600280546001600160a01b031916905534801561004357600080fd5b506040516108db3803806108db8339818101604052602081101561006657600080fd5b50516001600160a01b038116600081815260208190526040808220805460ff19166001179055518392917f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c391a25050610155565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100fb57805160ff1916838001178555610128565b82800160010185558215610128579182015b8281111561012857825182559160200191906001019061010d565b50610134929150610138565b5090565b61015291905b80821115610134576000815560010161013e565b90565b610749806101646000396000f3fe60806040526004361061007b5760003560e01c8063a2d1183a1161004e578063a2d1183a14610195578063af640d0f1461021f578063b15be2f514610250578063d7f31eb9146102655761007b565b8063022914a7146100b35780632cb41958146100fa5780632f54bf6e1461012f5780637065cb4814610162575b60408051348152905133917f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874919081900360200190a2005b3480156100bf57600080fd5b506100e6600480360360208110156100d657600080fd5b50356001600160a01b031661032d565b604080519115158252519081900360200190f35b34801561010657600080fd5b5061012d6004803603602081101561011d57600080fd5b50356001600160a01b0316610342565b005b34801561013b57600080fd5b506100e66004803603602081101561015257600080fd5b50356001600160a01b03166103b0565b34801561016e57600080fd5b5061012d6004803603602081101561018557600080fd5b50356001600160a01b03166103ce565b3480156101a157600080fd5b506101aa61042c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101e45781810151838201526020016101cc565b50505050905090810190601f1680156102115780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022b57600080fd5b506102346104b9565b604080516001600160a01b039092168252519081900360200190f35b34801561025c57600080fd5b5061012d6104c8565b34801561027157600080fd5b5061012d6004803603606081101561028857600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156102b857600080fd5b8201836020820111156102ca57600080fd5b803590602001918460018302840111640100000000831117156102ec57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610519945050505050565b60006020819052908152604090205460ff1681565b61034b336103b0565b61035457600080fd5b6002546040516001600160a01b038084169216907f5d611f318680d00598bb735d61bacf0c514c6b50e1e5ad30040a4df2b12791c790600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b031660009081526020819052604090205460ff1690565b6103d7336103b0565b6103e057600080fd5b6001600160a01b038116600081815260208190526040808220805460ff19166001179055517f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c39190a250565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104b15780601f10610486576101008083540402835291602001916104b1565b820191906000526020600020905b81548152906001019060200180831161049457829003601f168201915b505050505081565b6002546001600160a01b031681565b6104d1336103b0565b6104da57600080fd5b33600081815260208190526040808220805460ff19169055517f58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da9190a2565b610522336103b0565b61052b57600080fd5b60006060846001600160a01b031684846040518082805190602001908083835b6020831061056a5780518252601f19909201916020918201910161054b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146105cc576040519150601f19603f3d011682016040523d82523d6000602084013e6105d1565b606091505b50915091508181906106615760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561062657818101518382015260200161060e565b50505050905090810190601f1680156106535780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50846001600160a01b03167fc1de93dfa06362c6a616cde73ec17d116c0d588dd1df70f27f91b500de207c4185856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156106d25781810151838201526020016106ba565b50505050905090810190601f1680156106ff5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a2505050505056fea265627a7a723158202177ae46fd748afd0bcdc6663e3adb6115cb4906ef76a8a6fe7e7f50c914380e64736f6c63430005100032516d56787953616d716862466346724a445945396335616739343164506f53787666664655715450364254477a596080604052600280546001600160a01b031916905534801561002057600080fd5b506040516110f83803806110f88339818101604052602081101561004357600080fd5b5051600180546001600160a01b0319166001600160a01b03808416919091179182905560408051929091168252517f79f74fd5964b6943d8a1865abfb7f668c92fa3f32c0a2e3195da7d0946703ad7916020908290030190a15061104c806100ac6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806396d1531c1161008c578063ead22bee11610066578063ead22bee146105ce578063f77c4791146105f5578063f851a44014610619578063ffc28af714610621576100cf565b806396d1531c146103df578063c6af3eb5146104e4578063d769333514610596576100cf565b806304c991fa146100d45780631c7ba19d146101085780632dabac29146101bd578063503f396b146102f7578063704b6c021461039357806392eefe9b146103b9575b600080fd5b610106600480360360608110156100ea57600080fd5b50803590602081013590604001356001600160a01b03166106d6565b005b6101066004803603604081101561011e57600080fd5b6001600160801b03198235169190810190604081016020820135600160201b81111561014957600080fd5b82018360208201111561015b57600080fd5b803590602001918460018302840111600160201b8311171561017c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610762945050505050565b610106600480360360608110156101d357600080fd5b6001600160801b03198235169190810190604081016020820135600160201b8111156101fe57600080fd5b82018360208201111561021057600080fd5b803590602001918460018302840111600160201b8311171561023157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561028357600080fd5b82018360208201111561029557600080fd5b803590602001918460018302840111600160201b831117156102b657600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061085d945050505050565b61031e6004803603602081101561030d57600080fd5b50356001600160801b031916610962565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610358578181015183820152602001610340565b50505050905090810190601f1680156103855780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610106600480360360208110156103a957600080fd5b50356001600160a01b03166109fd565b610106600480360360208110156103cf57600080fd5b50356001600160a01b0316610a7e565b610406600480360360208110156103f557600080fd5b50356001600160801b031916610b35565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561044757818101518382015260200161042f565b50505050905090810190601f1680156104745780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156104a757818101518382015260200161048f565b50505050905090810190601f1680156104d45780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b610106600480360360608110156104fa57600080fd5b810190602081018135600160201b81111561051457600080fd5b82018360208201111561052657600080fd5b803590602001918460018302840111600160201b8311171561054757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550506001600160a01b038335169350505060200135610c74565b610106600480360360808110156105ac57600080fd5b508035906020810135906001600160a01b036040820135169060600135610d34565b61031e600480360360208110156105e457600080fd5b50356001600160801b031916610de1565b6105fd610e49565b604080516001600160a01b039092168252519081900360200190f35b6105fd610e58565b6101066004803603604081101561063757600080fd5b6001600160801b03198235169190810190604081016020820135600160201b81111561066257600080fd5b82018360208201111561067457600080fd5b803590602001918460018302840111600160201b8311171561069557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610e67945050505050565b604080518082018252600080825242602080840182815288845283825285842088855282528584206001600160a01b0388168086529083529386902094518555516001909401939093558351918252918101919091528151849286927fedfbdfd15decaf53dd822d2c89ba81f97fc9e7687087a2474398671fbf64ebba929081900390910190a3505050565b6001546001600160a01b0316331461077957600080fd5b6001600160801b03198216600090815260036020908152604090912082516107a392840190610f51565b507f51e5f42496d568b937facdd9d52c03bb59fda23cfb38d9c67b2a25aff8e83c84828260405180836001600160801b0319166001600160801b031916815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561081e578181015183820152602001610806565b50505050905090810190601f16801561084b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b6001546001600160a01b0316331461087457600080fd5b60408051808201825283815260208082018490526001600160801b031986166000908152600582529290922081518051929391926108b59284920190610f51565b5060208281015180516108ce9260018501920190610f51565b50905050816040518082805190602001908083835b602083106109025780518252601f1990920191602091820191016108e3565b51815160209384036101000a60001901801990921691161790526040805192909401829003822033835293519395507fa41c7bc01a19a1f2490ea9081f161455757097ccf896b4ef94f6c225efd5e12894509083900301919050a2505050565b60046020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156109f55780601f106109ca576101008083540402835291602001916109f5565b820191906000526020600020905b8154815290600101906020018083116109d857829003601f168201915b505050505081565b6001546001600160a01b03163314610a1457600080fd5b600254604080516001600160a01b039283168152918316602083015280517f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b9281900390910190a1600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b03161580610aa057506001546001600160a01b031633145b610adb5760405162461bcd60e51b815260040180806020018281038252602b815260200180610fed602b913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b03838116919091179182905560408051929091168252517f79f74fd5964b6943d8a1865abfb7f668c92fa3f32c0a2e3195da7d0946703ad7916020908290030190a150565b60056020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909291839190830182828015610bcc5780601f10610ba157610100808354040283529160200191610bcc565b820191906000526020600020905b815481529060010190602001808311610baf57829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c6a5780601f10610c3f57610100808354040283529160200191610c6a565b820191906000526020600020905b815481529060010190602001808311610c4d57829003601f168201915b5050505050905082565b6001546001600160a01b03163314610c8b57600080fd5b80826001600160a01b03167fbb3bfbd21aacef758ed76e61cf4f50ebc5bb19d83b86f9dd1f9ebbcd7e9e7f4f856040518080602001828103825283818151815260200191508051906020019080838360005b83811015610cf5578181015183820152602001610cdd565b50505050905090810190601f168015610d225780820380516001836020036101000a031916815260200191505b509250505060405180910390a3505050565b6000808211610d44576000610d4d565b81620151800242015b60408051808201825242808252602080830185815260008b81528083528581208b825283528581206001600160a01b038b168083529084529086902094518555905160019094019390935583519283528201528082018390529051919250859187917fe663f148e7a26c204f3be67a702302b2a6a577faf8ec7956385786dad984a6e6919081900360600190a35050505050565b60036020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156109f55780601f106109ca576101008083540402835291602001916109f5565b6001546001600160a01b031681565b6002546001600160a01b031681565b6001546001600160a01b03163314610e7e57600080fd5b6001600160801b0319821660009081526004602090815260409091208251610ea892840190610f51565b50816001600160801b0319167f9d4650a66631fd12d4c5721023113148b145e41089a676beb17121c3c2fb55f4826040518080602001828103825283818151815260200191508051906020019080838360005b83811015610f13578181015183820152602001610efb565b50505050905090810190601f168015610f405780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610f9257805160ff1916838001178555610fbf565b82800160010185558215610fbf579182015b82811115610fbf578251825591602001919060010190610fa4565b50610fcb929150610fcf565b5090565b610fe991905b80821115610fcb5760008155600101610fd5565b9056fe636f6e74726f6c6c65722063616e6e6f74206265207468652073616d65206173207468652073656e646572a265627a7a7231582046938c9c4131837c4ca28e103d1b447428fac94b02ed1f5edba55f435b43a7fb64736f6c63430005100032416c72656164792072656769737465726564206f6e2074686174206964656e7469747949276d206e6f7420616e206f776e6572206f662074686174206964656e74697479a265627a7a72315820a950a8f07237488cc8a60e448fe56acf35a4d7e92aec2407c0102ebfa496def064736f6c63430005100032";

    public static final String FUNC_CREATEIDENTITY = "createIdentity";

    public static final String FUNC_FORWARDTO = "forwardTo";

    public static final String FUNC_HASCAP = "hasCap";

    public static final String FUNC_REGISTERIDENTITY = "registerIdentity";

    public static final String FUNC_REGISTERED_IDENTITIES = "registered_identities";

    public static final String FUNC_SETCAP = "setCap";

    public static final String FUNC_SETDEVICE = "setDevice";

    public static final String FUNC_UNREGISTERIDENTITY = "unregisterIdentity";

    public static final String FUNC_UPGRADE = "upgrade";

    public static final Event ACCOUNTRECOVERED_EVENT = new Event("AccountRecovered", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CAPSET_EVENT = new Event("CapSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event IDENTITYCREATED_EVENT = new Event("IdentityCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event IDENTITYREGISTERED_EVENT = new Event("IdentityRegistered", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event IDENTITYUNREGISTERED_EVENT = new Event("IdentityUnregistered", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event MNEMONICSET_EVENT = new Event("MnemonicSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;


    protected IdentityManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, (Web3)web3j, credentials, contractGasProvider);
    }


    public List<AccountRecoveredEventResponse> getAccountRecoveredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACCOUNTRECOVERED_EVENT, transactionReceipt);
        ArrayList<AccountRecoveredEventResponse> responses = new ArrayList<AccountRecoveredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccountRecoveredEventResponse typedResponse = new AccountRecoveredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newUser = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AccountRecoveredEventResponse> accountRecoveredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AccountRecoveredEventResponse>() {
            @Override
            public AccountRecoveredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ACCOUNTRECOVERED_EVENT, log);
                AccountRecoveredEventResponse typedResponse = new AccountRecoveredEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newUser = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AccountRecoveredEventResponse> accountRecoveredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCOUNTRECOVERED_EVENT));
        return accountRecoveredEventFlowable(filter);
    }

    public List<CapSetEventResponse> getCapSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CAPSET_EVENT, transactionReceipt);
        ArrayList<CapSetEventResponse> responses = new ArrayList<CapSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CapSetEventResponse typedResponse = new CapSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.identity = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.device = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.cap = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.start_date = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.end_date = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CapSetEventResponse> capSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CapSetEventResponse>() {
            @Override
            public CapSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CAPSET_EVENT, log);
                CapSetEventResponse typedResponse = new CapSetEventResponse();
                typedResponse.log = log;
                typedResponse.identity = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.device = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.cap = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.start_date = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.end_date = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CapSetEventResponse> capSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CAPSET_EVENT));
        return capSetEventFlowable(filter);
    }

    public List<IdentityCreatedEventResponse> getIdentityCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(IDENTITYCREATED_EVENT, transactionReceipt);
        ArrayList<IdentityCreatedEventResponse> responses = new ArrayList<IdentityCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IdentityCreatedEventResponse typedResponse = new IdentityCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IdentityCreatedEventResponse> identityCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, IdentityCreatedEventResponse>() {
            @Override
            public IdentityCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(IDENTITYCREATED_EVENT, log);
                IdentityCreatedEventResponse typedResponse = new IdentityCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IdentityCreatedEventResponse> identityCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(IDENTITYCREATED_EVENT));
        return identityCreatedEventFlowable(filter);
    }

    public List<IdentityRegisteredEventResponse> getIdentityRegisteredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(IDENTITYREGISTERED_EVENT, transactionReceipt);
        ArrayList<IdentityRegisteredEventResponse> responses = new ArrayList<IdentityRegisteredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IdentityRegisteredEventResponse typedResponse = new IdentityRegisteredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IdentityRegisteredEventResponse> identityRegisteredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, IdentityRegisteredEventResponse>() {
            @Override
            public IdentityRegisteredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(IDENTITYREGISTERED_EVENT, log);
                IdentityRegisteredEventResponse typedResponse = new IdentityRegisteredEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IdentityRegisteredEventResponse> identityRegisteredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(IDENTITYREGISTERED_EVENT));
        return identityRegisteredEventFlowable(filter);
    }

    public List<IdentityUnregisteredEventResponse> getIdentityUnregisteredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(IDENTITYUNREGISTERED_EVENT, transactionReceipt);
        ArrayList<IdentityUnregisteredEventResponse> responses = new ArrayList<IdentityUnregisteredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IdentityUnregisteredEventResponse typedResponse = new IdentityUnregisteredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.proxy = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IdentityUnregisteredEventResponse> identityUnregisteredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, IdentityUnregisteredEventResponse>() {
            @Override
            public IdentityUnregisteredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(IDENTITYUNREGISTERED_EVENT, log);
                IdentityUnregisteredEventResponse typedResponse = new IdentityUnregisteredEventResponse();
                typedResponse.log = log;
                typedResponse.proxy = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IdentityUnregisteredEventResponse> identityUnregisteredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(IDENTITYUNREGISTERED_EVENT));
        return identityUnregisteredEventFlowable(filter);
    }

    public List<MnemonicSetEventResponse> getMnemonicSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MNEMONICSET_EVENT, transactionReceipt);
        ArrayList<MnemonicSetEventResponse> responses = new ArrayList<MnemonicSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MnemonicSetEventResponse typedResponse = new MnemonicSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.username = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MnemonicSetEventResponse> mnemonicSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MnemonicSetEventResponse>() {
            @Override
            public MnemonicSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MNEMONICSET_EVENT, log);
                MnemonicSetEventResponse typedResponse = new MnemonicSetEventResponse();
                typedResponse.log = log;
                typedResponse.username = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MnemonicSetEventResponse> mnemonicSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MNEMONICSET_EVENT));
        return mnemonicSetEventFlowable(filter);
    }

    public List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldIdentityManager = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newIdentityManager = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpgradedEventResponse>() {
            @Override
            public UpgradedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPGRADED_EVENT, log);
                UpgradedEventResponse typedResponse = new UpgradedEventResponse();
                typedResponse.log = log;
                typedResponse.oldIdentityManager = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newIdentityManager = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> createIdentity(byte[] keyMnemonic, byte[] keyProfile, String urlProfile, String username, String salt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEIDENTITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes16(keyMnemonic), 
                new org.web3j.abi.datatypes.generated.Bytes16(keyProfile), 
                new org.web3j.abi.datatypes.Utf8String(urlProfile), 
                new org.web3j.abi.datatypes.Utf8String(username), 
                new org.web3j.abi.datatypes.Utf8String(salt)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> forwardTo(String identity, String destination, BigInteger value, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FORWARDTO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, identity), 
                new org.web3j.abi.datatypes.Address(160, destination), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasCap(String identity, String device, String cap) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASCAP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, identity), 
                new org.web3j.abi.datatypes.Address(160, device), 
                new org.web3j.abi.datatypes.Utf8String(cap)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> registerIdentity(String identity, String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REGISTERIDENTITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, identity), 
                new org.web3j.abi.datatypes.Address(160, owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> registered_identities(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REGISTERED_IDENTITIES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setCap(String identity, String device, String cap, BigInteger start_date, BigInteger end_date) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCAP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, identity), 
                new org.web3j.abi.datatypes.Address(160, device), 
                new org.web3j.abi.datatypes.Utf8String(cap), 
                new org.web3j.abi.datatypes.generated.Uint256(start_date), 
                new org.web3j.abi.datatypes.generated.Uint256(end_date)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setDevice(String identity, String device, BigInteger start_date, BigInteger end_date) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETDEVICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, identity), 
                new org.web3j.abi.datatypes.Address(160, device), 
                new org.web3j.abi.datatypes.generated.Uint256(start_date), 
                new org.web3j.abi.datatypes.generated.Uint256(end_date)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unregisterIdentity(String identity) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNREGISTERIDENTITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, identity)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgrade(String identity, String newIdentityManager) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPGRADE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, identity), 
                new org.web3j.abi.datatypes.Address(160, newIdentityManager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

  
    public static IdentityManager load(String contractAddress, Web3 web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new IdentityManager(contractAddress, web3j, credentials, contractGasProvider);
    }


    public static RemoteCall<IdentityManager> deploy(Web3 web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(IdentityManager.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<IdentityManager> deploy(Web3 web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(IdentityManager.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<IdentityManager> deploy(Web3 web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(IdentityManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<IdentityManager> deploy(Web3 web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(IdentityManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AccountRecoveredEventResponse extends BaseEventResponse {
        public String proxy;//NOSONAR

        public String newUser;//NOSONAR
    }

    public static class CapSetEventResponse extends BaseEventResponse {
        public String identity;//NOSONAR

        public String device;//NOSONAR

        public String cap;//NOSONAR

        public BigInteger start_date;//NOSONAR

        public BigInteger end_date;//NOSONAR
    }

    public static class IdentityCreatedEventResponse extends BaseEventResponse {
        public String proxy;//NOSONAR
    }

    public static class IdentityRegisteredEventResponse extends BaseEventResponse {
        public String proxy;//NOSONAR
    }

    public static class IdentityUnregisteredEventResponse extends BaseEventResponse {
        public String proxy;//NOSONAR
    }

    public static class MnemonicSetEventResponse extends BaseEventResponse {
        public byte[] username;//NOSONAR

        public String from;//NOSONAR
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String oldIdentityManager;//NOSONAR

        public String newIdentityManager;//NOSONAR
    }
}
